name: Build Portable Windows Executable

on:
  push:
    branches: [main]

jobs:
  build-32bit:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: 3.12
          architecture: 'x86'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install VC++ Redistributables
        shell: pwsh
        run: |
          # Download and install Visual C++ Redistributables
          $vc_installer_url = "https://aka.ms/vs/16/release/vc_redist.x86.exe"
          Invoke-WebRequest -Uri $vc_installer_url -OutFile "vc_redist.x86.exe"
          
          # Run the installer with quiet mode
          Start-Process -FilePath "vc_redist.x86.exe" -ArgumentList "/quiet", "/install" -Wait
          
          # Cleanup installer after installation
          Remove-Item -Force "vc_redist.x86.exe"

      - name: Debug Environment
        run: |
          python --version
          python -c "import platform; print(platform.architecture())"
          dir "C:\Windows\System32\api-ms-win-crt-*.dll"

      - name: Verify Installation
        shell: pwsh
        run: |
          $vcRegistryPath = "HKLM:\SOFTWARE\Microsoft\VisualStudio\14.0\VC\Runtimes\x86"
          $vcInstallPath = "C:\Windows\System32"

          $vcFile = Get-ChildItem -Path $vcInstallPath -Filter "msvcr*.dll" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          $vccVersion = (Get-ItemProperty -Path $vcFile.FullName).VersionInfo.FileVersion

          # Check if Visual C++ Redistributable (x86) is already installed
          if (Test-Path $vcRegistryPath) {
            Write-Output "Visual C++ Redistributable (x86) found:"
            Get-ChildItem -Path $vcRegistryPath | ForEach-Object { 
                Write-Output "$($_.Name): $($_.GetValue('Version'))" 
            }
          } else {
            Write-Output "Visual C++ Redistributable (x86) not found. Installing..."
            # # Download and install Visual C++ Redistributable (x86) if missing
            # Invoke-WebRequest -Uri "https://aka.ms/vs/16/release/vc_redist.x86.exe" -OutFile "vc_redist.x86.exe"
            # Start-Process -FilePath "vc_redist.x86.exe" -ArgumentList "/quiet", "/install" -Wait
            # Write-Output "Installation complete."
          }

          # Wait until registry keys are available or timeout after multiple attempts
          $maxAttempts = 3
          $attempts = 0
          while (-not (Test-Path $vcRegistryPath) -and $attempts -lt $maxAttempts) {
            Write-Output "Waiting for Visual C++ Redistributable to be fully installed..."
            Start-Sleep -Seconds 10
            $attempts++
          }
          
          if ($attempts -eq $maxAttempts) {
            Write-Output "Registry keys not found. Attempting to add them manually..."

            # Create registry path if it does not exist
            if (-not (Test-Path $vcRegistryPath)) {
                Write-Output "Creating registry path: $vcRegistryPath"
                New-Item -Path $vcRegistryPath -Force
            }
            
            # Define the registry path and version info
            # Extract version from choco list or any other source
            Set-ItemProperty -Path $vcRegistryPath -Name "Version" -Value $vccVersion
            Set-ItemProperty -Path $vcRegistryPath -Name "Installed" -Value 1
            Set-ItemProperty -Path $vcRegistryPath -Name "Architecture" -Value "x86"

            Write-Output "Registry keys added for Visual C++ Redistributable (x86)."
          } else {
            Write-Output "Visual C++ Redistributable installed and registry keys are now available."
          }

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Compile portable executable for x86
        shell: pwsh
        run: |
          $font_dir = python -c "import os, pyfiglet; print(os.path.join(os.path.dirname(pyfiglet.__file__), 'fonts'))"
          $vcRuntimeDir = "C:\Windows\System32"

          # Get all api-ms-win-crt-*.dll files from the System32 directory
          $dlls = Get-ChildItem -Path "$vcRuntimeDir" -Filter "api-ms-win-crt-*.dll" -Recurse

          if ($dlls.Count -eq 0) {
              Write-Error "No required DLL files found in the directory."
              exit 1
          }

          # Step 3: Build the add-binary arguments
          $addBinaryArgs = $dlls | ForEach-Object { "$($_.FullName);." }

          # Step 4: Join all the add-binary arguments into a single string, separating with spaces
          $addBinaryArgsString = $addBinaryArgs -join " --add-binary "

          # Prepare the PyInstaller command with the font directory and binary arguments
          $pyinstallerCommand = "pyinstaller --onefile --add-data ""$font_dir;pyfiglet/fonts"" --name email_toolkit_x86 --add-binary ""$addBinaryArgsString"" run.py"

          # Output the generated PyInstaller command for debugging
          Write-Output "Generated PyInstaller Command:"
          Write-Output $pyinstallerCommand

          # Execute the PyInstaller command
          Invoke-Expression $pyinstallerCommand

      - name: Upload EXE as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: email_toolkit_x86
          path: dist/email_toolkit_x86.exe
  
  build-64bit:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: 3.12
          architecture: 'x64'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install VC++ Redistributables
        shell: pwsh
        run: |
          # Download and install Visual C++ Redistributables
          $vc_installer_url = "https://aka.ms/vs/16/release/vc_redist.x64.exe"
          Invoke-WebRequest -Uri $vc_installer_url -OutFile "vc_redist.x64.exe"
          
          # Run the installer with quiet mode
          Start-Process -FilePath "vc_redist.x64.exe" -ArgumentList "/quiet", "/install" -Wait
          
          # Cleanup installer after installation
          Remove-Item -Force "vc_redist.x64.exe"

      - name: Install dependencies
        run: pip install -r requirements.txt


      - name: Compile portable executable for x64
        shell: pwsh
        run: |
          $font_dir = python -c "import os, pyfiglet; print(os.path.join(os.path.dirname(pyfiglet.__file__), 'fonts'))"
          pyinstaller --onefile --add-data "$font_dir;pyfiglet/fonts" --add-binary "C:\\hostedtoolcache\\windows\\Python\\3.12.7\\x64\\DLLs\\api-ms-win-crt-*;." --name email_toolkit_x64 run.py

      - name: Upload EXE as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: email_toolkit_x64
          path: dist/email_toolkit_x64.exe